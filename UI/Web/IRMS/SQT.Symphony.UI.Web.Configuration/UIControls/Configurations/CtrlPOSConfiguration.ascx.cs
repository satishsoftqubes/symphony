using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using SQT.Symphony.BusinessLogic.Configuration.DTO;
using SQT.Symphony.BusinessLogic.Configuration.BLL;


namespace SQT.Symphony.UI.Web.Configuration.UIControls.Configurations
{
    public partial class CtrlPOSConfiguration : System.Web.UI.UserControl
    {
        #region Property and Variables
        // property to save companyid;
        public Guid POSConfigID
        {
            get
            {
                return ViewState["POSConfigID"] != null ? new Guid(Convert.ToString(ViewState["POSConfigID"])) : Guid.Empty;
            }
            set
            {
                ViewState["POSConfigID"] = value;
            }
        }

        
        public bool IsPopupMessage = false;
        public bool IsListMessage = false;
        public bool IsDuplicateRecord = false;

        #endregion Property and Variables

        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                BindData();
                BindBreadCrumb();
            }
        }
        public string UserRights
        {
            get
            {
                return ViewState["UserRights"] != null ? Convert.ToString(ViewState["UserRights"]) : string.Empty;
            }
            set
            {
                ViewState["UserRights"] = value;
            }
        }
        #region Private Method
        /// <summary>
        /// Bind Data Here
        /// </summary>
        private void BindData()
        {
            try
            {
                if (clsSession.CompanyID == Guid.Empty || clsSession.PropertyID == Guid.Empty)
                    Response.Redirect("~/GUI/AccessDenied.aspx?returnurl=" + Request.RawUrl.ToString());

                CheckUserAuthorization();
                SetPageLables();
                LoadData();
                GetData();
            }
            catch (Exception ex)
            {
                Page.ClientScript.RegisterStartupScript(this.GetType(), Guid.NewGuid().ToString(), "fnDisplayCatchErrorMessage();", true);
                MessageBox.Show(ex.Message.ToString());
            }
        }

        private void CheckUserAuthorization()
        {
            if (clsSession.UserType.ToUpper() != "SUPERADMIN")
                this.UserRights = clsCommon.GetUserAuthorization(clsSession.UserID, "POSCONFIGURATION.ASPX");
            else
                this.UserRights = "1111";

            if (this.UserRights.Substring(0, 1) == "0")
                Response.Redirect("~/GUI/AccessDenied.aspx");

            btnSave.Visible = this.UserRights.Substring(2, 1) == "1";
        }
        /// <summary>
        /// Set Page Lable Here
        /// </summary>
        private void SetPageLables()
        {
            ltrMainHeader.Text = clsCommon.GetGlobalResourceText("POSConfiguration", "lblMainHeader", "POS Configuration");
            chkShowFastSalesItem.Text = clsCommon.GetGlobalResourceText("POSConfiguration", "chkShowFastSalesItem", "Show Fast Sales Item");
            chkStockInHandAdjustable.Text = clsCommon.GetGlobalResourceText("POSConfiguration", "chkStockInhandAdjustable", "Stock InHand Adjustable");
            chkNonStockItemSold.Text = clsCommon.GetGlobalResourceText("POSConfiguration", "chknonStockItemSold", "NonStock Item Sold");
            chkBarCodeEnable.Text = clsCommon.GetGlobalResourceText("POSConfiguration", "chkBorCodeEnable", "Bar Code Enable");
            chkItemCodeAutoGenerated.Text = clsCommon.GetGlobalResourceText("POSConfiguration", "chkItemCodeAutoGenerate", "Item Code AutoGenerate");
            ltrStockUpdate.Text = clsCommon.GetGlobalResourceText("POSConfiguration", "ltrStockUpdate", "Stock Update");

            btnSave.Text = clsCommon.GetGlobalResourceText("Common", "lblBtnSave", "Save");
            btnCancel.Text = clsCommon.GetGlobalResourceText("Common", "lblBtnCancel", "Cancel");
        }

        private void LoadData()
        {
            List<ProjectTerm> lstProjectTerm = null;
            ProjectTerm objProjectTerm = new ProjectTerm();
            objProjectTerm.IsActive = true;
            objProjectTerm.CompanyID = clsSession.CompanyID;
            objProjectTerm.PropertyID = clsSession.PropertyID;
            objProjectTerm.Category = "STOCKUPDT";
            lstProjectTerm = ProjectTermBLL.GetAll(objProjectTerm);
            if (lstProjectTerm.Count != 0)
            {
                ddlStockUpdate.DataSource = lstProjectTerm;
                ddlStockUpdate.DataTextField = "DisplayTerm";
                ddlStockUpdate.DataValueField = "TermID";
                ddlStockUpdate.DataBind();
                ddlStockUpdate.Items.Insert(0, new ListItem("-Select-", Guid.Empty.ToString()));
            }
            else
                ddlStockUpdate.Items.Insert(0, new ListItem("-Select-", Guid.Empty.ToString()));
        }

        private void GetData()
        {
            List<POSConfig> lstProject = null;
            POSConfig objProjectTerm = new POSConfig();
            objProjectTerm.IsActive = true;
            objProjectTerm.CompanyID = clsSession.CompanyID;
            objProjectTerm.PropertyID = clsSession.PropertyID;
            lstProject = POSConfigBLL.GetAll(objProjectTerm);
            
            if (lstProject.Count != 0)
            {
                this.POSConfigID = lstProject[0].POSConfigID;
                chkShowFastSalesItem.Checked = Convert.ToBoolean(lstProject[0].IsShowFastSalesItemFirst);
                chkStockInHandAdjustable.Checked = Convert.ToBoolean(lstProject[0].IsStockInHandAdjustable);
                chkNonStockItemSold.Checked = Convert.ToBoolean(lstProject[0].IsNonStockItemSold);
                chkBarCodeEnable.Checked = Convert.ToBoolean(lstProject[0].IsBarCodeEnable);
                chkItemCodeAutoGenerated.Checked = Convert.ToBoolean(lstProject[0].IsItemCodeAutoGenerated);
                ddlStockUpdate.SelectedIndex = ddlStockUpdate.Items.FindByValue(Convert.ToString(lstProject[0].StockUpdateType_TermID)) != null ? ddlStockUpdate.Items.IndexOf(ddlStockUpdate.Items.FindByValue(Convert.ToString(lstProject[0].StockUpdateType_TermID))) : 0;
            }           
        }

        private void BindBreadCrumb()
        {
            DataList dlBreadCrumb = (DataList)this.Page.Master.FindControl("dlBreadCrumb");

            DataTable dt = new DataTable();
            DataColumn cl = new DataColumn("NameColumn");
            dt.Columns.Add(cl);

            DataColumn cl1 = new DataColumn("Link");
            dt.Columns.Add(cl1);

            //DataRow dr2 = dt.NewRow();
            //dr2["NameColumn"] = clsCommon.GetGlobalResourceText("BreadCrumb", "lblDashboard", "Dashboard");
            //dr2["Link"] = "";
            //dt.Rows.Add(dr2);

            if (clsSession.UserType.ToUpper() == "SUPERADMIN")
            {
                DataRow dr = dt.NewRow();
                dr["NameColumn"] = clsSession.CompanyName ;
                dr["Link"] = "~/GUI/Property/CompanyList.aspx";
                dt.Rows.Add(dr);
            }

            DataRow dr1 = dt.NewRow();
            dr1["NameColumn"] = clsSession.PropertyName ;
            dr1["Link"] = "~/GUI/Property/PropertyList.aspx";
            dt.Rows.Add(dr1);

            DataRow dr4 = dt.NewRow();
            dr4["NameColumn"] = clsCommon.GetGlobalResourceText("BreadCrumb", "lblPOSSetup", "POS Setup");
            dr4["Link"] = "";
            dt.Rows.Add(dr4);

            DataRow dr3 = dt.NewRow();
            dr3["NameColumn"] = clsCommon.GetGlobalResourceText("BreadCrumb", "lblPOSConfiguration", "POS Configuration") ;
            dr3["Link"] = "";
            dt.Rows.Add(dr3);

            dlBreadCrumb.RepeatColumns = dt.Rows.Count;
            dlBreadCrumb.DataSource = dt;
            dlBreadCrumb.DataBind();
        }

        /// <summary>
        /// Insert and Update Department
        /// </summary>
        private void SaveAndUpdatePOSConfiguration()
        {
            if (this.POSConfigID != Guid.Empty)
            {
                POSConfig objUpd = new POSConfig();
                POSConfig objOldDeptData = new POSConfig();
                objUpd = POSConfigBLL.GetByPrimaryKey(this.POSConfigID);
                objOldDeptData = POSConfigBLL.GetByPrimaryKey(this.POSConfigID);
                objUpd.IsShowFastSalesItemFirst = chkShowFastSalesItem.Checked;
                objUpd.IsStockInHandAdjustable = chkStockInHandAdjustable.Checked;
                objUpd.IsNonStockItemSold = chkNonStockItemSold.Checked;
                objUpd.IsBarCodeEnable = chkBarCodeEnable.Checked;
                objUpd.IsItemCodeAutoGenerated = chkItemCodeAutoGenerated.Checked;
                objUpd.StockUpdateType_TermID = new Guid(ddlStockUpdate.SelectedValue);
                
                POSConfigBLL.Update(objUpd);
                ActionLogBLL.SaveConfigurationActionLog(clsSession.UserID, "Update", objOldDeptData.ToString(), objUpd.ToString(), "pos_POSConfig");
                IsListMessage = true;
                ltrMsgList.Text = clsCommon.GetGlobalResourceText("CommonMessage", "lblMsgRecordUpdatedSuccessfully", "Record updated successfully.");
            }
            else
            {
                POSConfig objIns = new POSConfig();
                objIns.CompanyID = clsSession.CompanyID;
                objIns.PropertyID = clsSession.PropertyID;
                objIns.IsShowFastSalesItemFirst = chkShowFastSalesItem.Checked;
                objIns.IsStockInHandAdjustable = chkStockInHandAdjustable.Checked;
                objIns.IsNonStockItemSold = chkNonStockItemSold.Checked;
                objIns.IsBarCodeEnable = chkBarCodeEnable.Checked;
                objIns.IsItemCodeAutoGenerated = chkItemCodeAutoGenerated.Checked;
                objIns.StockUpdateType_TermID = new Guid(ddlStockUpdate.SelectedValue);
                objIns.IsActive = true;
                objIns.UpdatedOn = DateTime.Now;
                objIns.UpdatedBy = clsSession.UserID;
                objIns.IsSynch = false;
                POSConfigBLL.Save(objIns);
                ActionLogBLL.SaveConfigurationActionLog(clsSession.UserID, "Save", objIns.ToString(), objIns.ToString(), "pos_POSConfig");
                IsListMessage = true;
                ltrMsgList.Text = clsCommon.GetGlobalResourceText("CommonMessage", "lblMsgRecordSavedSuccessfully", "Record saved successfully.");
                this.POSConfigID = objIns.POSConfigID;
            }
            GetData();
        }
       

        #endregion Private Method

        protected void btnSave_Click(object sender, EventArgs e)
        {
            SaveAndUpdatePOSConfiguration();
        }

        protected void btnCancel_Click(object sender, EventArgs e)
        {
            try
            {
                //Response.Redirect("~/GUI/Index.aspx");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString());
            }
        }
    }
}